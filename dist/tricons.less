// Remove unused icons to slim down your CSS
@tricons: hamburger-menu, x, arrow-left, arrow-right, arrow-up, arrow-down, plus, minus, loading, caret-up, caret-down, caret-left, caret-right, heart;

@import 'tricons/hamburger-menu';
@import 'tricons/x';
@import 'tricons/arrow-left';
@import 'tricons/arrow-right';
@import 'tricons/arrow-up';
@import 'tricons/arrow-down';
@import 'tricons/plus';
@import 'tricons/minus';
@import 'tricons/loading';
@import 'tricons/caret-up';
@import 'tricons/caret-down';
@import 'tricons/caret-left';
@import 'tricons/caret-right';
@import 'tricons/heart';

// Customize the default values
@tricon-thickness: 2px;
@tricon-min-width: 40px;
@tricon-height: 40px;
@tricon-pad-vert: 0;
@tricon-pad-horz: 0;
@tricon-color: #fff;
@tricon-color-hover: #fff;
@tricon-bg-color: #2A97EF;
@tricon-bg-color-hover: saturate(lighten(#2A97EF, 5%), 5%);

// Default tricon
@default-tricon: hamburger-menu;

// Tricon mixin
.tricon (@thickness: @tricon-thickness, @min-width: @tricon-min-width, @height: @tricon-height, @pad-vert: @tricon-pad-vert, @pad-horz: @tricon-pad-horz, @color: @tricon-color, @color-hover: @tricon-color-hover, @bg-color: @tricon-bg-color, @bg-color-hover: @tricon-bg-color-hover) {
  @min-dimension: min(@height, @min-width);
  @bar-width: @min-dimension / 2;
  @bar-thickness-max: min(@min-dimension * 0.125, @thickness);
  height: @height + @pad-vert * 2;
  color: @color;
  padding: @pad-vert @pad-horz;
  background-color: @bg-color;
  box-sizing: border-box;
  display: inline-block;
  position: relative;
  text-align: center;
  font-size: 0;
  transition: all 200ms ease;
  &:before {
    content: '';
    display: block;
    width: @min-width;
  }
  &:hover {
    color: @color-hover;
    background-color: @bg-color-hover;
  }
  :empty {
    height: @bar-thickness-max;
    width: @bar-width;
    background-color: @color;
    left: @bar-width / 2 + @pad-horz;
    margin-top: @bar-thickness-max / -2;
    content: '';
    display: inline-block;
    position: absolute;
    top: 50%;
    transition: all 200ms ease;
    opacity: 1;
  }
  &:hover :empty {
    background-color: @color-hover;
  }
  // When text is first
  :not(:empty):first-child ~ :empty {
    left: auto;
    right: @bar-width / 2 + @pad-horz;
  }
  :not(:empty) {
    font-size: @min-dimension * 0.475;
    line-height: @height;
    padding: 0 @bar-width * 0.5;
    right: auto;
    left: auto;
    display: inline-block;
    transition: margin 100ms ease-in-out;
    &:last-child {
      margin-left: @bar-width * 1.33;
    }
    &:first-child {
      margin-right: @bar-width * 1.33;
    }
  }
  &[data-tricon=""] {
    :not(:empty) {
      &:last-child {
        margin-left: 0;
      }
      &:first-child {
        margin-right: 0;
      }
    }
    :empty {
      transition: all 100ms ease;
      opacity: 0;
    }
  }

  .tricons(@default-tricon);

  // Loop through all the tricons to set the styles for it
  .loop (@index) when (@index > 0) {
    @icon: e(extract(@tricons, @index));
    &[data-tricon="@{icon}"] {
      .tricons(@icon);
    }
    .loop (@index - 1);
  }

  .loop(length(@tricons));
}
